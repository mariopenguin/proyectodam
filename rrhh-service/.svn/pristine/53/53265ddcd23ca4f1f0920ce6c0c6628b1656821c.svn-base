package hello;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity // This tells Hibernate to make a table out of this class
public class User {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	private String name;
	private String email;
	@JsonIgnore
	@ManyToOne
	@JoinColumn(name = "empleadoDeDepartamento")
	private Departamento departamento;      //tambien se puede hacer instanciando departamento sin @mapeos, spring se encarga de asignar la fk al ver que esta departamento dentro de user
 									//no haria falta el set
	@JsonIgnore
	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "gestionproyectos", joinColumns = @JoinColumn(name = "id_Proyectos", referencedColumnName = "id"),
	inverseJoinColumns = @JoinColumn(name = "id_usuario", referencedColumnName = "id"))
	Set<Proyectos> proyectosSet;  

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Departamento getDepartamento() {
		return departamento;
	}

	public void setDepartamento(Departamento departamento) {
		this.departamento = departamento;
	}

	public Set<Proyectos> getProyectosSet() {
		return proyectosSet;
	}

	public void setProyectosSet(Set<Proyectos> proyectosSet) {
		this.proyectosSet = proyectosSet;
	}



}
