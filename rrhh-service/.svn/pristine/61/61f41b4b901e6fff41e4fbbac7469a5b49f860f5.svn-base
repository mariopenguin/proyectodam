package hello;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.User;
import hello.UserRepository;

//CLASE QUE SE ENCARGA DE LAS RUTAS Y NOMBRE DE PROYECTO
@Controller // This means that this class is a Controller
@RequestMapping(path = "/empresa") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private DepartamentoRepository departamentoRepository;
	@Autowired
	private ProyectosRepository proyectosRepository;

	
// AÃ‘ADIR
	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		// TESTEO DE 1-N
		User n = new User();
		n.setName(name);
		n.setEmail(email);

		Set<User> listaUser = new HashSet<>();
		listaUser.add(n);// lista de usuarios

		Departamento d = new Departamento((Integer) 0, "FINANZAS");
		n.setDepartamento(d);// al usuario le metemos el departamento
		d.setUsuarios(listaUser);// y al departamento le metemos la lista de los usuarios

		// SE GUARDA EL LADO N
		departamentoRepository.save(d);

		return "Saved";
	} 

// BUSCA TODOS
	@GetMapping(path = "/all")
	public @ResponseBody Collection<User> getAllUsers() {
		// This returns a JSON or XML with the users
		
		return  (Collection<User>) userRepository.findAll();

	}
		
	@GetMapping(path = "/contar")
	public @ResponseBody Integer contarDep() {
		// This returns a JSON or XML with the users

		return (int) departamentoRepository.count();

	}
// BUSCAS POR USUARIO
	// CON PATH VARIABLE SE USA EL METODO GET PARA COGER EL NOMBRE
	@GetMapping(path = "/name/{name}")
	public @ResponseBody User getByName(@PathVariable String name) {
		return userRepository.findByName(name);
	}

// BORRAR
	@GetMapping(path = "/borrar/{name}")
	public @ResponseBody String deleteByName(@PathVariable String name) {
		System.out.println("hago esto");
		// userRepository.deleteByName(name);
		User e = userRepository.findByName(name);
		if (e != null) {
			userRepository.delete(e);
			return "se se elimina";
		}
		System.out.println("faefafaiufh");
		return "no se elimina";

	}

// ACTUALIZAR
	// REQUEST PARAM SON LOS ATRIBUTOS DEL JSON
	@GetMapping(path = "/actualizar/{id}")
	public @ResponseBody String UpdateByName(@PathVariable int id, @RequestParam String name,
			@RequestParam String email) {
		User e = userRepository.findById(id);
		if (e != null) {
			e.setName(name);
			e.setEmail(email);
			userRepository.save(e);
			return "se ha actualizado";
		}
		return "no se actualiza";
	}

	@GetMapping(path = "/test")
	public @ResponseBody String testeo() {
		Proyectos p1 = new Proyectos("Tratamiento de residuos");
		Proyectos p2 = new Proyectos("SPRONG");
		Proyectos p3 = new Proyectos("Hibernar");
		Set<Proyectos> setProy = new HashSet<>();
		setProy.add(p1);
		setProy.add(p2);
		setProy.add(p3);
		
		User n = new User();
		n.setName("nombre1");
		n.setEmail("email1");
		Departamento d = new Departamento("FINANZAS");
		n.setDepartamento(d);//al usuario le metemos el departamento
		n.setProyectosSet(setProy);
		
		Set<User> listaUser = new HashSet<>();
		listaUser.add(n);//lista de usuarios
		d.setUsuarios(listaUser);//y al departamento le metemos la lista de los usuarios
		p1.setSetusuarios(listaUser);
		
		departamentoRepository.save(d);
		userRepository.save(n);
	
		proyectosRepository.save(p1);
		//SE GUARDA EL LADO N ANTES QUE EL LADO 1
		//EN LOS CASOS N A N DA IGUAL EL ORDEN
		
		
		
		return "testeo testeado testeador";
	}

}
