package hello;

import java.sql.DriverManager;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;

import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.mysql.fabric.xmlrpc.base.Array;
import aj.org.objectweb.asm.Type;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.criteria.CriteriaBuilder.In;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import hello.User;
import hello.UserRepository;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;


//CLASE QUE SE ENCARGA DE LAS RUTAS Y NOMBRE DE PROYECTO
@Controller // This means that this class is a Controller
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path = "/empresa") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private DepartamentoRepository departamentoRepository;
	@Autowired
	private ProyectosRepository proyectosRepository;

	
// AÃ‘ADIR
	@PostMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody User addNewUser(@RequestBody User user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		// TESTEO DE 1-N
		User n = new User();
		n.setName(user.getName());
		n.setEmail(user.getEmail());

		Set<User> listaUser = new HashSet<>();
		listaUser.add(n);// lista de usuarios

		Departamento d = new Departamento((Integer) 0, "FINANZAS");
		n.setDepartamento(d);// al usuario le metemos el departamento
		d.setUsuarios(listaUser);// y al departamento le metemos la lista de los usuarios

		// SE GUARDA EL LADO N
		departamentoRepository.save(d);

		return n;
	} 

// BUSCA TODOS
	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		
		return userRepository.findAll();

	}
		
	
// BUSCAS POR USUARIO
	// CON PATH VARIABLE SE USA EL METODO GET PARA COGER EL NOMBRE
	@GetMapping(path = "/name/{name}")
	public @ResponseBody User getByName(@PathVariable String name) {
		return userRepository.findByName(name);
	}

// BORRAR
	@PostMapping(path = "/borrar")
	public @ResponseBody String deleteByName(@RequestBody String name) {
		User e = userRepository.findByName(name);
		if (e != null) {
			userRepository.delete(e);
			return "se se elimina";
		}

		return "no se elimina";

	}
// BORRAR POR ID
	@PostMapping(path = "/borrarById")
	public @ResponseBody String deleteById(@RequestBody int id) {
		User e = userRepository.findById(id);
		if (e != null) {
			userRepository.delete(e);
			return "se se elimina";
		}

		return "no se elimina";

	}

// ACTUALIZAR
	// REQUEST PARAM SON LOS ATRIBUTOS DEL JSON
	@GetMapping(path = "/actualizar/{id}")
	public @ResponseBody String UpdateByName(@PathVariable int id, @RequestParam String name,
			@RequestParam String email) {
		User e = userRepository.findById(id);
		if (e != null) {
			e.setName(name);
			e.setEmail(email);
			userRepository.save(e);
			return "se ha actualizado";
		}
		return "no se actualiza";
	}

//sacar tablas a excel---------------------------------------------------------------------------
	@GetMapping(path = "/excel")
	public @ResponseBody void excel() throws SQLException, ClassNotFoundException, IOException {
		Class.forName("com.mysql.jdbc.Driver");
	      Connection connect = DriverManager.getConnection( 
	         "jdbc:mysql://localhost:3306/persianas" , 
	         "springuser" , 
	         "ThePassword"
	      );
	      
	      Statement statement = connect.createStatement();
	      ResultSet resultSet = statement.executeQuery("SELECT Distinct User.id,User.name,User.empleado_de_departamento, Departamento.nombredepartamento FROM User INNER JOIN Departamento ON User.empleado_de_departamento=Departamento.id");
	      XSSFWorkbook workbook = new XSSFWorkbook(); 
	      XSSFSheet spreadsheet = workbook.createSheet("persianas");
	      
	      XSSFRow row = spreadsheet.createRow(1);
	      XSSFCell cell;
	      cell = row.createCell(1);
	      cell.setCellValue("EMPLEADO ID");
	      cell = row.createCell(2);
	      cell.setCellValue("EMPLEADO NAME");
	      cell = row.createCell(3);
	      cell.setCellValue("ID DEPARTAMENTO");
	      cell = row.createCell(4);
	      cell.setCellValue("DEPARTMENT NAME");
	      //cell = row.createCell(5);
	      //cell.setCellValue("NAME DEPARTMENT");
	      int i = 2;

	      while(resultSet.next()) {
	         row = spreadsheet.createRow(i);
	         cell = row.createCell(1);
	         cell.setCellValue(resultSet.getInt("id"));
	         cell = row.createCell(2);
	         cell.setCellValue(resultSet.getString("name"));
	         cell = row.createCell(3);
	         cell.setCellValue(resultSet.getInt("empleado_de_departamento"));
	         cell = row.createCell(4);
	         cell.setCellValue(resultSet.getString("nombredepartamento"));
	        // cell = row.createCell(5);
	         //cell.setCellValue(resultSet.getString("empleadoDeDepartamento"));
	         i++;
	      }

	      FileOutputStream out = new FileOutputStream(new File("exceldatabase.xlsx"));
	      workbook.write(out);
	      out.close();
	      System.out.println("exceldatabase.xlsx written successfully");
	   }
	 
//meter excel a la tabla de sql-------------------------------------------------------------------------------------------------
	@GetMapping(path = "/sql")
	public @ResponseBody void excel_sql() throws SQLException, ClassNotFoundException, IOException {
		Class.forName("com.mysql.jdbc.Driver");
	      Connection connect = DriverManager.getConnection( 
	         "jdbc:mysql://localhost:3306/persianas" , 
	         "springuser" , 
	         "ThePassword"
	      );
	      FileInputStream file = new FileInputStream(new File("excel_sql.xlsx"));
	      Statement statement = connect.createStatement();
	      XSSFWorkbook workbook = new XSSFWorkbook(file); 
	      XSSFSheet sheet = workbook.createSheet("a");
	      sheet = workbook.getSheetAt(0);
	     
	      Row row;
	      User usu =new User();
	      System.out.println(sheet.getLastRowNum());
	        for(int i=1; i<=sheet.getLastRowNum(); i++){  //points to the starting of excel i.e excel first row
	            row =  sheet.getRow(i);  //sheet number
	           
		            String id;
					if( row.getCell(0)==null) { 
						id = "0";
					}else { 
						id= row.getCell(0).toString();
						
            		}

	                   String name;
					if( row.getCell(1)==null) {
						name = "null";
						}  //suppose excel cell is empty then its set to 0 the variable
	                   else {name = row.getCell(1).toString();
	                   }   //else copies cell data to name variable

	                   String email;
					if( row.getCell(2)==null) { email = "null";   }
	                   else  {email   = row.getCell(2).toString();
						
	                   }
				
						usu.setId(Integer.parseInt((id).substring(0, (id).indexOf("."))));
						System.out.println("b");
						usu.setName(name);
						usu.setEmail(email);
					  //  System.out.println(usu.getId()+" "+usu.getName()+" "+usu.getEmail());
					    userRepository.save(usu);
		    
	        }
	        System.out.println(usu.getId()+" "+usu.getName()+" "+usu.getEmail());
			file.close();
			
		}
//PDF----------------------------------------------------------------------------------------------------
	@GetMapping(path = "/pdf")
	public @ResponseBody String pdf(HttpServletResponse response) throws ClassNotFoundException, SQLException, DocumentException, IOException, JRException {

		Class.forName("com.mysql.jdbc.Driver");
		
	      Connection connect = (Connection) DriverManager.getConnection( 
	         "jdbc:mysql://localhost:3306/persianas" , 
	         "springuser" , 
	         "ThePassword"
	      );
	      		String sourceFileName = "C:\\Users\\FERNANDOA.JURADO\\eclipse-workspace\\patata\\src\\main\\java\\hello\\Invoice.jrxml";
				JasperCompileManager.compileReportToFile(sourceFileName);

				String fileName = "C:\\Users\\FERNANDOA.JURADO\\eclipse-workspace\\patata\\src\\main\\java\\hello\\Invoice.jasper";
				JasperPrint jp =(JasperPrint) JasperFillManager.fillReport(fileName,null,connect);
			
				JasperExportManager.exportReportToPdfFile(jp,"C:\\Users\\FERNANDOA.JURADO\\ficheroJasper.pdf");
				JasperPrint print = JasperFillManager.fillReport(fileName, null, connect);
				response.addHeader("Content-disposition", "attachment; filename=Invoice.pdf");
				ServletOutputStream stream = response.getOutputStream();
				JasperExportManager.exportReportToPdfStream(print, stream);
				connect.close();
				System.out.println("PDF CASPOSO");
				
		return "pdf elaborado!!, lo encrontrarÃ¡s en otro sitio..adivinas!!!";
		
		
	}
//Exportar a word-----------------------------------------------------------------------------------------------------
	@GetMapping(path = "/word")
	public @ResponseBody void getWord(HttpServletResponse response) throws IOException {
		String[] columns = { "name", "email" };
		ArrayList<User> employees = new ArrayList<>();
		employees = (ArrayList<User>) userRepository.findAll();
		response.setContentType("application/vnd.ms-word");
		response.setHeader("Content-Disposition", "attachment; filename=employees.docx");
		// Blank Document
		XWPFDocument document = new XWPFDocument();

		// create table
		XWPFTable table = document.createTable();

		// create first row
		XWPFTableRow tableRowOne = table.getRow(0);
		tableRowOne.getCell(0).setText(columns[0]);
		for (int i = 1; i < columns.length; i++) {
			tableRowOne.addNewTableCell().setText(columns[i]);
		}

		// create second row
		// XWPFTableRow tableRowTwo = table.createRow();
		for (User u : employees) {
			int numCell = 0;
			XWPFTableRow RowtableRow = table.createRow();
			RowtableRow.getCell(numCell++).setText(u.getName());
			RowtableRow.getCell(numCell++).setText(u.getEmail());
			
		}
		document.write(response.getOutputStream());
		response.getOutputStream().close();
		System.out.println("create_table.docx written successully");
	}

//test-----------------------------------------------------------------------------------------------------------------
	@GetMapping(path = "/test")
	public @ResponseBody String testeo() {
		Proyectos p1 = new Proyectos("Tratamiento de residuos");
		Proyectos p2 = new Proyectos("SPRONG");
		Proyectos p3 = new Proyectos("Hibernar");
		Set<Proyectos> setProy = new HashSet<>();
		setProy.add(p1);
		setProy.add(p2);
		setProy.add(p3);
		
		User n = new User();
		n.setName("nombre1");
		n.setEmail("email1");
		Departamento d = new Departamento("FINANZAS");
		n.setDepartamento(d);//al usuario le metemos el departamento
		n.setProyectosSet(setProy);
		
		Set<User> listaUser = new HashSet<>();
		listaUser.add(n);//lista de usuarios
		d.setUsuarios(listaUser);//y al departamento le metemos la lista de los usuarios
		p1.setSetusuarios(listaUser);
		
		departamentoRepository.save(d);
		userRepository.save(n);
	
		proyectosRepository.save(p1);
		//SE GUARDA EL LADO N ANTES QUE EL LADO 1
		//EN LOS CASOS N A N DA IGUAL EL ORDEN
		
		
		
		return "testeo testeado testeador";
	}

}
